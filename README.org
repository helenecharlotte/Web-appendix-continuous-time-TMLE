# Web-appendix-continuous-time-TMLE
* Welcome

This is the web-appendix of our manuscript entitled 
/Continuous-time targeted minimum loss-based estimation of estimation of intervention-specific mean outcomes./

=[[provide link to arXiv]]=

We provide the R-codes behind our empirical studies as described in
the manuscript. This is for proof-of-concept so that anonymous users
can reproduce the results. 

Note that we are currently working hard on achieving user-friendly
code which implements our method outside the limited setting of the
empirical studies presented here. Stay tuned!

Below we show how to load and use the code.

IMPORTANT: For simulations of many time points, i.e., with K=100, the
current implementation requires a computer with a rather large memory.

We also describe the simulation scenario in terms of the actual R-code
and indicate how one can change the code to generate different
scenarios.

[Making of tables 1 and 2](https://github.com/helenecharlotte/Web-appendix-continuous-time-TMLE/tree/main#making-of-tables-1-and-2 "hej")


* Running the code

The following code uses one computing core to calculate the estimates
of conTMLE (and LTMLE) using a single simulated dataset. The code that
produces the empirical results of Table 1 and Table 2 of the
manuscript are shown longer down.

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output :exports both  :session *R* :cache yes  
# NOTE: you need to set the working directory 
source("./examples/load.R")
K5.conTMLE <- runTMLE(K=5, # number of time points
                      n = 1000, # sample size
                      misspecify.init = FALSE, # if TRUE, the initial outcome model is misspecified (see manuscript)
                      seed=23, # control randomness of data simulation
                      M = 1, # number of simulations
                      no_cores=1) # number of computing cores
K5.conTMLE  
#+END_SRC

: 
: Estimating psi with TMLE based on observed data:
:    conTMLE.A0      se.A0   init.A0 se.init.A0 conTMLE.A1      se.A1   init.A1 se.init.A1
: 1:  0.5118338 0.02427116 0.5065769 0.02427193  0.4152895 0.02232546 0.4043225 0.02233339

With the =verbose=TRUE= option, we can see the targeting steps: 

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output :exports both  :session *R* :cache yes  
# NOTE: you need to set the working directory 
source("./examples/load.R")
K5.conTMLE <- runTMLE(K=5, # number of time points
                      n = 1000, # sample size
                      misspecify.init = FALSE, # if TRUE, the initial outcome model is misspecified (see manuscript)
                      seed=23, # control randomness of data simulation
                      M = 1, # number of simulations
                      verbose = TRUE, # get messages when running the code 
                      no_cores=1) # number of computing cores   
#+END_SRC

#+RESULTS[<2020-11-20 11:50:20> 08b7254dfa94b280d58c0a96a536c51bc862bb2c]:
#+begin_example

Estimating psi with TMLE based on observed data:

[1] "40.7% followed regime"
[1] "Targeting step 1 -> 2"
[1] "eps.hat=-0.00027863900464767"
[1] "eic=-0.000993720127214605"
[1] "Targeting step 2 -> 3"
[1] "eps.hat=-0.000139387953486727"
[1] "eic=-0.000925263680801293"
[1] "43.9% followed regime"
[1] "Targeting step 1 -> 2"
[1] "eps.hat=0.0213511784663721"
[1] "eic=0.00996849807589143"
[1] "Targeting step 2 -> 3"
[1] "eps.hat=0.0109564875668656"
[1] "eic=0.00483497091785892"
[1] "Targeting step 3 -> 4"
[1] "eps.hat=0.00564918208232945"
[1] "eic=0.00219353021543659"
[1] "Targeting step 4 -> 5"
[1] "eps.hat=0.00291977466491907"
[1] "eic=0.000829773273472266"
[1] "Targeting step 5 -> 6"
[1] "eps.hat=0.00151095520925359"
[1] "eic=0.000124438857138074"
[1] "Targeting step 6 -> 7"
[1] "eps.hat=0.000782404708210254"
[1] "eic=-0.000240691497246047"
[1] "Targeting step 7 -> 8"
[1] "eps.hat=0.000405279644162037"
[1] "eic=-0.000429797508755549"
[1] "Targeting step 8 -> 9"
[1] "eps.hat=0.000209967640814827"
[1] "eic=-0.00052776200486349"
#+end_example



Our function =runLTMLE= applies =LTMLE= to data simulated from the
same data-generating distribution. 

#+BEGIN_SRC R  :results output :exports both  :session *R* :cache yes  
# NOTE: you need to set the working directory 
source("./examples/load.R")
K5.ltmle <- runLTMLE(K=5,
                     misspecify.init = FALSE,
                     seed=23,
                     M = 1, 
                     n = 1000)
K5.ltmle 
#+END_SRC

: 
: Estimating psi with LTMLE based on observed data:
:     ltmle.A0      sd.A0  ltmle.A1      sd.A1
: 1: 0.5089093 0.03729756 0.4120871 0.02770643


* Making of tables 1 and 2

** Table 1

We provide code that produces results for =K=5= and =K=30= for LTMLE
and our new method, conTMLE. The code in files [[examples/table1.R]] and
[[examples/table2.R]] generate the following results:


*** K=5
#+BEGIN_SRC R  :results output :exports both  :session *R* :cache yes  
source("./examples/load.R") 
table1.K5.true <- readRDS(file="./examples/table1-K5-true.rds")
table1.K5.ltmle <- readRDS(file="./examples/table1-K5-ltmle.rds")
table1.K5.conTMLE <- readRDS(file="./examples/table1-K5-conTMLE.rds")
summary(object=table1.K5.ltmle,true=table1.K5.true)  
summary(object=table1.K5.conTMLE,true=table1.K5.true)   
#+END_SRC

#+begin_example
     LTMLE        A0       A1       psi
1     true  0.559987 0.424507  0.135480
2     mean  0.559747 0.424874  0.134874
3     bias -0.000239 0.000367 -0.000607
4       se  0.035922 0.028254  0.045702
5 coverage  0.990000 0.981000  0.992000
6      MSE  0.025099 0.023475  0.034414
   conTMLE        A0       A1      psi
1     true  0.559987 0.424507  0.13548
2     mean  0.559625 0.425005  0.13462
3     bias -0.000362 0.000498 -0.00086
4       se  0.023723 0.023036  0.03307
5 coverage  0.947000 0.948000  0.94200
6      MSE  0.024532 0.023270  0.03390
#+end_example


*** K=30
#+BEGIN_SRC R  :results output :exports both  :session *R* :cache yes  
source("./examples/load.R")
table1.K30.true <- readRDS(file="./examples/table1-K30-true.rds")
table1.K30.ltmle <- readRDS(file="./examples/table1-K30-ltmle.rds")
table1.K30.conTMLE <- readRDS(file="./examples/table1-K30-conTMLE.rds")
summary(object=table1.K30.ltmle,true=table1.K30.true) 
summary(object=table1.K30.conTMLE,true=table1.K30.true)   
#+END_SRC

#+begin_example
     LTMLE      A0      A1       psi
1     true 0.61143 0.47358  0.137851
2     mean 0.61290 0.47587  0.137029
3     bias 0.00147 0.00229 -0.000821
4       se 0.07734 0.05712  0.096144
5 coverage 1.00000 0.99900  0.999000
6      MSE 0.03330 0.03448  0.049831
   conTMLE      A0      A1      psi
1     true 0.61143 0.47358  0.13785
2     mean 0.61156 0.47492  0.13664
3     bias 0.00013 0.00134 -0.00121
4       se 0.02498 0.02464  0.03508
5 coverage 0.94900 0.94500  0.95100
6      MSE 0.02513 0.02470  0.03467
#+end_example



** Table 2

*** K=30 (misspecified initial estimator)
#+BEGIN_SRC R  :results output   :exports both  :session *R* :cache yes  
source("./examples/load.R")
table2.K30.true <- readRDS(file="./examples/table1-K30-true.rds")
table2.K30.misspecified <- readRDS(file="./examples/table2-K30-conTMLE.rds")
summary(object=table2.K30.misspecified,true=table2.K30.true,init=TRUE)
summary(object=table2.K30.misspecified,true=table2.K30.true)    
#+END_SRC

#+begin_example
  Initial estimate      A0      A1     psi
1             true  0.6114 0.47358  0.1379
2             mean  0.5940 0.47573  0.1183
3             bias -0.0174 0.00216 -0.0196
   conTMLE         A0       A1       psi
1     true  0.6114291 0.473578  0.137851
2     mean  0.6113686 0.474011  0.137358
3     bias -0.0000605 0.000433 -0.000493
4       se  0.0260242 0.024016  0.035412
5 coverage  0.9580000 0.945000  0.953000
6      MSE  0.0254086 0.024506  0.034669
#+end_example



* The simulation scenario


** Overall description
 
We consider a setting where subjects of a population are followed for
=K= days of follow-up time. On any given day, any subject may change
treatment, covariates, may be lost to follow-up (right-censored) or
may experience the outcome of interest. Both the treatment and the
censoring mechanisms are subject to time-dependent confounding.  The
data are simulated such that the number of monitoring times per
subject are approximately the same across different =K=. Thus, the
larger =K= is, the less events are observed at single monitoring
times.

** Current setting


The current simulation setting is defined by the function =sim.data=
(see file [[R/sim-data.R]]). The way we simulate the data is best
described with the following example. Baseline covariates =L0= and
treatment =A0= are generated first. Followup values of both processes
(=Lk=, =Ak=) as well as censoring (=Ck=) and outcome (=Yk=) processes
are then generated in a loop through the values =1:K=. The value
=Yk+1= contains the status of the outcome at the end of followup. The
=sim.data= function outputs the data in wide format; this is the
format needed for =ltmle=.

#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output   :exports both  :session *R* :cache yes  
sim.data(n=10,K=3,seed=3)     
#+END_SRC

#+begin_example
    id        L0 A0 Y1 dN.L1 L1 dN.A1 A1 C1 Y2 dN.L2 L2 dN.A2 A2 C2 Y3 dN.L3 L3 dN.A3 A3 C3 Y4
 1:  1 0.8333333  0  0     0  0     0  0  0  0     1  0     0  0  0  0     0  0     0  0  0  0
 2:  2 0.3333333  1  0     0  0     1  1  0  0     0  0     0  1  0  0     0  0     1  1  0  0
 3:  3 0.6666667  0  0     1  1     0  0  0  0     0  1     0  0  0  0     0  1     0  0  0  0
 4:  4 0.6666667  0  0     0  0     1  1  0  0     0  0     0  1  0  0     1  0     0  1  0  0
 5:  5 0.3333333  1  0     0  0     0  1  0  0     1  1     0  1  0  0     1  1     1  0  0  0
 6:  6 0.5000000  0  0     0  0     1  0  0  1     1  1     1  0  0  1     1  1     0  0  0  1
 7:  7 0.6666667  1  0     0  0     0  1  0  0     0  0     1  1  0  0     0  0     1  1  0  0
 8:  8 0.3333333  0  1     0  0     1  0  0  1     0  0     1  0  0  1     1  1     1  0  0  1
 9:  9 0.8333333  1  0     0  0     0  1  0  0     0  0     1  1  0  0     1  0     0  1  0  0
10: 10 0.3333333  0  0     0  0     0  0  0  0     0  0     0  0  0  0     0  0     1  0  0  0
#+end_example

Our estimation function =conTMLE= transform the data to long format
which is more suitable when =K= is large since we only need a row at
the monitoring times:


#+ATTR_LATEX: :options otherkeywords={}, deletekeywords={}
#+BEGIN_SRC R  :results output   :exports both  :session *R* :cache yes  
print.long.format(sim.data(n=5,K=50,seed=10))        
#+END_SRC

#+begin_example
    id  k        L0 A0 A C L Y dN.A dN.L
 1:  1 12 0.5000000  1 1 0 1 0    0    1
 2:  1 29 0.5000000  1 1 0 0 0    0    1
 3:  1 33 0.5000000  1 1 0 0 0    1    0
 4:  1 38 0.5000000  1 1 0 0 0    1    0
 5:  1 46 0.5000000  1 1 0 0 0    0    1
 6:  1 51 0.5000000  1 1 0 0 0    0    0
 7:  2  5 0.1666667  1 1 0 0 0    1    0
 8:  2 13 0.1666667  1 1 0 0 0    1    0
 9:  2 15 0.1666667  1 1 0 1 0    0    1
10:  2 21 0.1666667  1 1 0 1 0    1    0
11:  2 22 0.1666667  1 1 0 1 1    0    0
12:  3 15 0.3333333  0 0 0 1 0    0    1
13:  3 25 0.3333333  0 0 0 1 0    1    0
14:  3 36 0.3333333  0 0 0 1 0    1    0
15:  3 43 0.3333333  0 0 0 1 1    0    0
16:  4  4 0.6666667  1 1 0 0 0    1    0
17:  4 11 0.6666667  1 1 0 1 0    1    1
18:  4 18 0.6666667  1 1 0 1 1    0    0
19:  5  7 1.0000000  0 0 0 0 1    0    0
#+end_example
 
In our current setting, all dependencies between the processes are
limited to the previous values and the baseline values. Note also that
the specific parameter constellation depends on the value of =K=
(needed for the number of monitoring times per subject to be
approximately the same across different =K=).


#+BEGIN_SRC R  :results output raw drawer  :exports code  :session *R* :cache yes  
# Step 1: baseline covariate 
L0 <- sample(1:6, n, replace=1000)/6
# Baseline treatment
form.A0 <- function(L0){
    cbind(-0.1+0.25*L0)
}
# Covariate monitoring process: time of current measurement 
form.dN.L <- function(L0, dN.L.prev, L.prev, A.prev){
    -0.2-0.05*K-0.025*(K>7)-0.25*dN.L.prev-0.15*L0-0.1*(A.prev==1)+0.3*L.prev
}
# Treatment monitoring process, time of current measurement 
form.dN.A <- function(L0, dN.A.prev, L.prev, A.prev){
    -0.75-0.05*K-0.42*dN.A.prev+0.15*L0+0.3*(A.prev==2)+0.4*(A.prev==1)-0.25*L.prev
}
# Covariate values at monitoring times
form.L <- function(L0, L.prev, A.prev, A0){
    0.5-0.4*A0+0.15*L0-0.25*(A.prev==1)+0.4*L.prev
}
# Treatment values at monitoring times
form.A <- function(L0, L.prev, A.prev, A0){
    cbind(-2.1+(1-A0)*1.7+(1-A.prev)*1.8-A.prev*1.7+L.prev*2.1)
}
# Censoring process
form.C <- function(L0, L.prev, A.prev, A0){
    -3.95+(K>40)*5-0.4*K^{2/3}-0.24*(K>2 & K<=4)-0.4*(K>4 & K<=9)
    -(K>9)*0.4*K^{1/5}+0.2*(K>25)*K^{1/4}
    +0.1*L0+0.2*(A0==1)+0.9*(A0==2)+2.15*L.prev
}
# Outcome process
form.Y <- function(L0, L.prev, A.prev, A0, dN.A.prev) {
    -1.1-0.33*K/3*(K>2 & K<=4)-0.25*K^{2/3}-0.25*(K>4 & K<=9)-
        (K>25 & K<45)*0.3*K^{1/5}-
            (K>75)*0.31+(K>85)*0.2-
            (K>25 & K<75)*0.5*K^{1/5}+0.6*(K>25)*K^{1/4}-0.25*A.prev+
            0.4*L.prev-0.25*A0+0.35*L.prev*A0+(K>75)*0.1*A0+(K>85)*0.01*A0
}
#+END_SRC

** Changing the current setting



We have to be careful when changing the simulation setting. For
example, just changing the distribution of =A= given the history (does
not change the true values of the target parameter, but) may result in
positivity violation as in the following (as signaled by the warning
message):


#+BEGIN_SRC R  :results output   :exports both  :session *R* :cache yes  
source("./examples/load.R")
treatment.formula <- function(L0, L.prev, A.prev, A0){
        cbind(-5.5*(1-A0))
    }  
compute.true(K=5,n=100000,B=1,seed=9,form.A=treatment.formula,progress.bar=-1) 
# dt <- sim.data(n=200,K=3,seed=3,form.Y=outcome.formula)
test1 <- runTMLE(K=5, # number of time points
                 n = 200, # sample size
                 misspecify.init = FALSE, # if TRUE, the initial outcome model is misspecified (see manuscript)
                 seed=3, # control randomness of data simulation
                 M = 1, # number of simulations
                 no_cores=1,
                 form.A=treatment.formula,progress.bar=-1)
test1    
#+END_SRC

#+begin_example
psi0.A0 psi0.A1 
0.56194 0.42764

Estimating psi with TMLE based on observed data:

Warning message:
In conTMLE(dt, targeting = 2, smooth.initial = TRUE, max.iter = max.iter,  :
  not much support for regime A=0 (13%); beware of positivity issues
   conTMLE.A0      se.A0   init.A0 se.init.A0 conTMLE.A1      se.A1   init.A1 se.init.A1
1:  0.5318134 0.03700563 0.5424941 0.03684714  0.2903036 0.05483801 0.3204847 0.05502519
#+end_example


The positivity violations result in considerably inaccurate
inference. Here we have repeated the simulations above =M=1000= times
to illustrate this:

#+BEGIN_SRC R  :results output :exports both  :session *R* :cache yes  
source("./examples/load.R") 
table1.K5.true <- readRDS(file="./examples/table1-K5-true.rds")
table1.K5.conTMLE <- readRDS(file="./examples/positivity-violation-table1-K5-conTMLE.rds") 
summary(object=table1.K5.conTMLE,true=table1.K5.true)  
#+END_SRC

:    conTMLE       A0      A1      psi
: 1     true  0.55999 0.42451  0.13548
: 2     mean  0.55420 0.42484  0.12936
: 3     bias -0.00579 0.00033 -0.00612
: 4       se  0.07496 0.02275  0.07834
: 5 coverage  0.58800 0.95400  0.62800
: 6      MSE  0.13922 0.02276  0.14147



In the following, we instead as an example remove the direct effect
(note that there is still an effect through the =L= process) of the
treatment on outcome:

#+BEGIN_SRC R  :results output   :exports both  :session *R* :cache yes  
source("./examples/load.R")
outcome.formula <- function(L0, L.prev, A.prev, A0, dN.A.prev) {
  return(-2 # intercept
         -0*A.prev # treatment effect
         + 0.4*L.prev  # covariate effect
         +0*A0 # baseline treatment effect
         )
}
compute.true(K=5,n=100000,B=1,seed=8,form.Y=outcome.formula,progress.bar=-1)
test2 <- runTMLE(K=5, # number of time points
                n = 200, # sample size
                misspecify.init = FALSE, # if TRUE, the initial outcome model is misspecified (see manuscript)
                seed=3, # control randomness of data simulation
                M = 1, # number of simulations
                no_cores=1,
                form.Y=outcome.formula,progress.bar=-1)
test2 
#+END_SRC

: psi0.A0 psi0.A1 
: 0.58832 0.57308
: 
: Estimating psi with TMLE based on observed data:
: 
:    conTMLE.A0      se.A0   init.A0 se.init.A0 conTMLE.A1      se.A1   init.A1 se.init.A1
: 1:   0.571716 0.05475289 0.5749211 0.05476379   0.580153 0.05175538 0.5577254 0.05184291


*  Dependencies 

** R-version

The code has been tested with the following R version

#+BEGIN_SRC R  :results output :exports results  :session *R* :cache yes  
version
#+END_SRC

#+begin_example
               _                           
platform       x86_64-pc-linux-gnu         
arch           x86_64                      
os             linux-gnu                   
system         x86_64, linux-gnu           
status                                     
major          4                           
minor          0.2                         
year           2020                        
month          06                          
day            22                          
svn rev        78730                       
language       R                           
version.string R version 4.0.2 (2020-06-22)
nickname       Taking Off Again
#+end_example

and the following package versions:

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes  
pp <- c("data.table", "zoo", "stringr", "ltmle", "parallel", "foreach", "doParallel")
Publish::org(data.table(Package=pp,Version=sapply(pp,function(x) as.character(packageVersion(x)))))
#+END_SRC

:results:
| Package    | Version |
|------------+---------|
| data.table |  1.13.0 |
| zoo        |   1.8.8 |
| stringr    |   1.4.0 |
| ltmle      |   1.2.0 |
| parallel   |   4.0.2 |
| foreach    |   1.5.0 |
| doParallel |  1.0.15 |
:end:

